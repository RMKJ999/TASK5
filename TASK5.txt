import numpy as np
import pandas as pd
import os
import cv2
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Define paths
data_dir = 'path/to/food-101/dataset/'
images_dir = os.path.join(data_dir, 'images')
metadata_file = os.path.join(data_dir, 'food-101/metadata.csv')

# Load metadata (assuming it contains food item labels and calorie information)
metadata_df = pd.read_csv(metadata_file)

# Preprocess images and labels
def load_images_and_labels(images_dir, metadata_df, img_size=(64, 64)):
    images = []
    labels = []
    calorie_info = []
    for index, row in metadata_df.iterrows():
        img_path = os.path.join(images_dir, row['image_name'])
        img = cv2.imread(img_path)
        img = cv2.resize(img, img_size)
        images.append(img)
        labels.append(row['food_label'])
        calorie_info.append(row['calories'])
    return np.array(images), np.array(labels), np.array(calorie_info)

# Load and preprocess data
images, labels, calorie_info = load_images_and_labels(images_dir, metadata_df)
images = images.astype('float32') / 255.0

# Encode labels
label_encoder = LabelEncoder()
encoded_labels = label_encoder.fit_transform(labels)

# Split data
X_train, X_test, y_train, y_test, calorie_train, calorie_test = train_test_split(images, encoded_labels, calorie_info, test_size=0.2, random_state=42)

# Data augmentation
train_datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)
test_datagen = ImageDataGenerator()

train_generator = train_datagen.flow(X_train, y_train, batch_size=32)
test_generator = test_datagen.flow(X_test, y_test, batch_size=32)

# Build the model for classification
model_classification = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(len(np.unique(encoded_labels)), activation='softmax')
])

model_classification.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the classification model
history_classification = model_classification.fit(train_generator, epochs=20, validation_data=test_generator, verbose=1)

# Evaluate the classification model
test_loss, test_acc = model_classification.evaluate(test_generator, verbose=2)
print(f'Classification Test accuracy: {test_acc:.2f}')

# Build the model for calorie regression
model_regression = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(1)  # Single output for calorie regression
])

model_regression.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

# Train the regression model
history_regression = model_regression.fit(train_generator, epochs=20, validation_data=test_generator, verbose=1)

# Evaluate the regression model
test_loss, test_mae = model_regression.evaluate(test_generator, verbose=2)
print(f'Regression Test MAE: {test_mae:.2f}')

# Plot training history for classification
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(history_classification.history['accuracy'], label='accuracy')
plt.plot(history_classification.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.title('Classification Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(history_classification.history['loss'], label='loss')
plt.plot(history_classification.history['val_loss'], label='val_loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.ylim([0, 1])
plt.legend(loc='upper right')
plt.title('Classification Training and Validation Loss')

plt.show()

# Save models
model_classification.save('food_item_recognition_model.h5')
model_regression.save('calorie_estimation_model.h5')
